import { PhysXConfig, RigidBodyProxy, Object3DBody, PhysXShapeConfig, BodyConfig, ControllerConfig, SceneQuery } from './types/ThreePhysX';
import { Object3D } from 'three';
export declare class PhysXInstance {
    static instance: PhysXInstance;
    worker: Worker;
    physicsProxy: any;
    bodies: Map<number, RigidBodyProxy>;
    shapes: Map<number, PhysXShapeConfig>;
    kinematicBodies: Map<number, Object3DBody>;
    controllerBodies: Map<number, RigidBodyProxy>;
    raycasts: Map<number, SceneQuery>;
    constructor(worker: Worker);
    initPhysX: (config: PhysXConfig) => Promise<void>;
    update: (delta: number) => Promise<void>;
    startPhysX: (start: boolean) => Promise<any>;
    addBody: (object: Object3D, shapes?: PhysXShapeConfig[]) => Promise<RigidBodyProxy>;
    addShapes: (object: any) => PhysXShapeConfig[];
    updateBody: (object: Object3DBody | any, options: BodyConfig) => Promise<void>;
    removeBody: (object: Object3DBody) => Promise<void>;
    addController: (object: Object3D, options?: ControllerConfig) => Promise<RigidBodyProxy>;
    updateController: (object: Object3DBody, config: ControllerConfig) => Promise<void>;
    removeController: (id: any) => Promise<void>;
    addRaycastQuery: (raycastQuery: SceneQuery) => Promise<SceneQuery>;
    updateRaycastQuery: (raycastQuery: any) => Promise<void>;
    removeRaycastQuery: (raycastQuery: SceneQuery) => Promise<void>;
    addConstraint: () => Promise<void>;
    removeConstraint: () => Promise<void>;
    private _getNextAvailableBodyID;
    _getNextAvailableShapeID: () => number;
    private _getNextAvailableRaycastID;
}
export { CapsuleBufferGeometry } from './utils/CapsuleBufferGeometry';
export { DebugRenderer } from './utils/DebugRenderer';
export * from './types/ThreePhysX';
export * from './threeToPhysX';
